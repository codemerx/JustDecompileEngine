using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Migrations.Operations;
using Microsoft.EntityFrameworkCore.Migrations.Operations.Builders;
using Mix.Cms.Lib.Models.Account;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Mix.Cms.Lib.Migrations.MixCmsAccount
{
	[DbContext(typeof(MixCmsAccountContext))]
	[Migration("20200312035845_Init")]
	public class Init : Migration
	{
		public Init()
		{
		}

		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
			modelBuilder.HasAnnotation("ProductVersion", "3.1.2").HasAnnotation("Relational:MaxIdentifierLength", 128).HasAnnotation("SqlServer:ValueGenerationStrategy", (SqlServerValueGenerationStrategy)2);
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetRoleClaims", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<int>(b.Property<int>("Id"), "int");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ClaimType"), "nvarchar(400)").HasMaxLength(0x190);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ClaimValue"), "nvarchar(400)").HasMaxLength(0x190);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("RoleId").IsRequired(true), "nvarchar(50)").HasMaxLength(50);
				b.HasKey(new string[] { "Id" });
				b.HasIndex(new string[] { "RoleId" });
				RelationalEntityTypeBuilderExtensions.ToTable(b, "AspNetRoleClaims");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetRoles", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Id"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ConcurrencyStamp"), "nvarchar(400)").HasMaxLength(0x190);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Name"), "nvarchar(250)").HasMaxLength(250);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("NormalizedName"), "nvarchar(250)").HasMaxLength(250);
				b.HasKey(new string[] { "Id" });
				RelationalIndexBuilderExtensions.HasFilter(RelationalIndexBuilderExtensions.HasName(b.HasIndex(new string[] { "NormalizedName" }).IsUnique(true), "RoleNameIndex"), "([NormalizedName] IS NOT NULL)");
				RelationalEntityTypeBuilderExtensions.ToTable(b, "AspNetRoles");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUserClaims", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<int>(b.Property<int>("Id"), "int");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ApplicationUserId"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ClaimType"), "nvarchar(400)").HasMaxLength(0x190);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ClaimValue"), "nvarchar(400)").HasMaxLength(0x190);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("UserId").IsRequired(true), "nvarchar(50)").HasMaxLength(50);
				b.HasKey(new string[] { "Id" });
				b.HasIndex(new string[] { "ApplicationUserId" });
				b.HasIndex(new string[] { "UserId" });
				RelationalEntityTypeBuilderExtensions.ToTable(b, "AspNetUserClaims");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUserLogins", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("LoginProvider"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ProviderKey"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ApplicationUserId"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ProviderDisplayName"), "nvarchar(400)").HasMaxLength(0x190);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("UserId").IsRequired(true), "nvarchar(50)").HasMaxLength(50);
				RelationalKeyBuilderExtensions.HasName(b.HasKey(new string[] { "LoginProvider", "ProviderKey" }), "PK_AspNetUserLogins_1");
				b.HasIndex(new string[] { "ApplicationUserId" });
				b.HasIndex(new string[] { "UserId" });
				RelationalEntityTypeBuilderExtensions.ToTable(b, "AspNetUserLogins");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUserRoles", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("UserId"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("RoleId"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ApplicationUserId"), "nvarchar(50)").HasMaxLength(50);
				b.HasKey(new string[] { "UserId", "RoleId" });
				b.HasIndex(new string[] { "ApplicationUserId" });
				b.HasIndex(new string[] { "RoleId" });
				RelationalEntityTypeBuilderExtensions.ToTable(b, "AspNetUserRoles");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUserTokens", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("UserId"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("LoginProvider"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Name"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Value"), "nvarchar(400)").HasMaxLength(0x190);
				b.HasKey(new string[] { "UserId", "LoginProvider", "Name" });
				RelationalEntityTypeBuilderExtensions.ToTable(b, "AspNetUserTokens");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUsers", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Id"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<int>(b.Property<int>("AccessFailedCount"), "int");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Avatar"), "nvarchar(250)").HasMaxLength(250);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ConcurrencyStamp"), "nvarchar(250)").HasMaxLength(250);
				RelationalPropertyBuilderExtensions.HasColumnType<int>(b.Property<int>("CountryId"), "int");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Culture"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnName<DateTime?>(b.Property<DateTime?>("Dob"), "DOB");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Email"), "nvarchar(250)").HasMaxLength(250);
				RelationalPropertyBuilderExtensions.HasColumnType<bool>(b.Property<bool>("EmailConfirmed"), "bit");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("FirstName"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Gender"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<bool>(b.Property<bool>("IsActived"), "bit");
				b.Property<DateTime>("JoinDate");
				b.Property<DateTime>("LastModified");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("LastName"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<bool>(b.Property<bool>("LockoutEnabled"), "bit");
				b.Property<DateTimeOffset?>("LockoutEnd");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ModifiedBy"), "nvarchar(250)").HasMaxLength(250);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("NickName"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("NormalizedEmail"), "nvarchar(250)").HasMaxLength(250);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("NormalizedUserName"), "nvarchar(250)").HasMaxLength(250);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("PasswordHash"), "nvarchar(250)").HasMaxLength(250);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("PhoneNumber"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<bool>(b.Property<bool>("PhoneNumberConfirmed"), "bit");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("RegisterType"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("SecurityStamp"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<bool>(b.Property<bool>("TwoFactorEnabled"), "bit");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("UserName"), "nvarchar(250)").HasMaxLength(250);
				b.HasKey(new string[] { "Id" });
				RelationalIndexBuilderExtensions.HasName(b.HasIndex(new string[] { "NormalizedEmail" }), "EmailIndex");
				RelationalIndexBuilderExtensions.HasFilter(RelationalIndexBuilderExtensions.HasName(b.HasIndex(new string[] { "NormalizedUserName" }).IsUnique(true), "UserNameIndex"), "([NormalizedUserName] IS NOT NULL)");
				RelationalEntityTypeBuilderExtensions.ToTable(b, "AspNetUsers");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.Clients", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Id"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<bool>(b.Property<bool>("Active"), "bit");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("AllowedOrigin"), "nvarchar(100)").HasMaxLength(100);
				RelationalPropertyBuilderExtensions.HasColumnType<int>(b.Property<int>("ApplicationType"), "int");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Name").IsRequired(true), "nvarchar(100)").HasMaxLength(100);
				RelationalPropertyBuilderExtensions.HasColumnType<int>(b.Property<int>("RefreshTokenLifeTime"), "int");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Secret").IsRequired(true), "nvarchar(50)").HasMaxLength(50);
				b.HasKey(new string[] { "Id" });
				RelationalEntityTypeBuilderExtensions.ToTable(b, "Clients");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.RefreshTokens", (EntityTypeBuilder b) => {
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Id"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("ClientId"), "nvarchar(50)").HasMaxLength(50);
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Email").IsRequired(true), "nvarchar(250)").HasMaxLength(250);
				b.Property<DateTime>("ExpiresUtc");
				b.Property<DateTime>("IssuedUtc");
				RelationalPropertyBuilderExtensions.HasColumnType<string>(b.Property<string>("Username"), "nvarchar(250)").HasMaxLength(250);
				b.HasKey(new string[] { "Id" });
				RelationalEntityTypeBuilderExtensions.ToTable(b, "RefreshTokens");
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetRoleClaims", (EntityTypeBuilder b) => b.HasOne("Mix.Cms.Lib.Models.Account.AspNetRoles", "Role").WithMany("AspNetRoleClaims").HasForeignKey(new string[] { "RoleId" }).OnDelete(3).IsRequired(true));
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUserClaims", (EntityTypeBuilder b) => {
				b.HasOne("Mix.Cms.Lib.Models.Account.AspNetUsers", "ApplicationUser").WithMany("AspNetUserClaimsApplicationUser").HasForeignKey(new string[] { "ApplicationUserId" });
				b.HasOne("Mix.Cms.Lib.Models.Account.AspNetUsers", "User").WithMany("AspNetUserClaimsUser").HasForeignKey(new string[] { "UserId" }).OnDelete(3).IsRequired(true);
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUserLogins", (EntityTypeBuilder b) => {
				b.HasOne("Mix.Cms.Lib.Models.Account.AspNetUsers", "ApplicationUser").WithMany("AspNetUserLoginsApplicationUser").HasForeignKey(new string[] { "ApplicationUserId" });
				b.HasOne("Mix.Cms.Lib.Models.Account.AspNetUsers", "User").WithMany("AspNetUserLoginsUser").HasForeignKey(new string[] { "UserId" }).OnDelete(3).IsRequired(true);
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUserRoles", (EntityTypeBuilder b) => {
				b.HasOne("Mix.Cms.Lib.Models.Account.AspNetUsers", "ApplicationUser").WithMany("AspNetUserRolesApplicationUser").HasForeignKey(new string[] { "ApplicationUserId" });
				b.HasOne("Mix.Cms.Lib.Models.Account.AspNetRoles", "Role").WithMany("AspNetUserRoles").HasForeignKey(new string[] { "RoleId" }).OnDelete(3).IsRequired(true);
				b.HasOne("Mix.Cms.Lib.Models.Account.AspNetUsers", "User").WithMany("AspNetUserRolesUser").HasForeignKey(new string[] { "UserId" }).OnDelete(3).IsRequired(true);
			});
			modelBuilder.Entity("Mix.Cms.Lib.Models.Account.AspNetUserTokens", (EntityTypeBuilder b) => b.HasOne("Mix.Cms.Lib.Models.Account.AspNetUsers", "User").WithMany("AspNetUserTokens").HasForeignKey(new string[] { "UserId" }).OnDelete(3).IsRequired(true));
		}

		protected override void Down(MigrationBuilder migrationBuilder)
		{
			migrationBuilder.DropTable("AspNetRoleClaims", null);
			migrationBuilder.DropTable("AspNetUserClaims", null);
			migrationBuilder.DropTable("AspNetUserLogins", null);
			migrationBuilder.DropTable("AspNetUserRoles", null);
			migrationBuilder.DropTable("AspNetUserTokens", null);
			migrationBuilder.DropTable("Clients", null);
			migrationBuilder.DropTable("RefreshTokens", null);
			migrationBuilder.DropTable("AspNetRoles", null);
			migrationBuilder.DropTable("AspNetUsers", null);
		}

		protected override void Up(MigrationBuilder migrationBuilder)
		{
			migrationBuilder.CreateTable("AspNetRoles", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<string>(null, nullable1, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable2 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<string>(null, nullable2, new int?(0x190), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable3 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder2 = table.Column<string>(null, nullable3, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable4 = nullable;
				nullable = null;
				return new { Id = operationBuilder, ConcurrencyStamp = operationBuilder1, Name = operationBuilder2, NormalizedName = table.Column<string>(null, nullable4, new int?(250), false, null, true, null, null, null, nullable, null) };
			}, null, (table) => table.PrimaryKey("PK_AspNetRoles", (x) => x.Id), null);
			migrationBuilder.CreateTable("AspNetUsers", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<string>(null, nullable1, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable2 = nullable;
				int? nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<int>(null, nullable2, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable4 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder2 = table.Column<string>(null, nullable4, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable5 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder3 = table.Column<string>(null, nullable5, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable6 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder4 = table.Column<int>(null, nullable6, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable7 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder5 = table.Column<string>(null, nullable7, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable8 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder6 = table.Column<DateTime>(null, nullable8, nullable3, false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable9 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder7 = table.Column<string>(null, nullable9, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable10 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder8 = table.Column<bool>(null, nullable10, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable11 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder9 = table.Column<string>(null, nullable11, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable12 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder10 = table.Column<string>(null, nullable12, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable13 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder11 = table.Column<bool>(null, nullable13, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable14 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder12 = table.Column<DateTime>(null, nullable14, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable15 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder13 = table.Column<DateTime>(null, nullable15, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable16 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder14 = table.Column<string>(null, nullable16, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable17 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder15 = table.Column<bool>(null, nullable17, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable18 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder16 = table.Column<DateTimeOffset>(null, nullable18, nullable3, false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable19 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder17 = table.Column<string>(null, nullable19, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable20 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder18 = table.Column<string>(null, nullable20, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable21 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder19 = table.Column<string>(null, nullable21, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable22 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder20 = table.Column<string>(null, nullable22, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable23 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder21 = table.Column<string>(null, nullable23, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable24 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder22 = table.Column<string>(null, nullable24, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable25 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder23 = table.Column<bool>(null, nullable25, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable26 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder24 = table.Column<string>(null, nullable26, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable27 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder25 = table.Column<string>(null, nullable27, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable28 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder26 = table.Column<bool>(null, nullable28, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable29 = nullable;
				nullable = null;
				return new { Id = operationBuilder, AccessFailedCount = operationBuilder1, Avatar = operationBuilder2, ConcurrencyStamp = operationBuilder3, CountryId = operationBuilder4, Culture = operationBuilder5, DOB = operationBuilder6, Email = operationBuilder7, EmailConfirmed = operationBuilder8, FirstName = operationBuilder9, Gender = operationBuilder10, IsActived = operationBuilder11, JoinDate = operationBuilder12, LastModified = operationBuilder13, LastName = operationBuilder14, LockoutEnabled = operationBuilder15, LockoutEnd = operationBuilder16, ModifiedBy = operationBuilder17, NickName = operationBuilder18, NormalizedEmail = operationBuilder19, NormalizedUserName = operationBuilder20, PasswordHash = operationBuilder21, PhoneNumber = operationBuilder22, PhoneNumberConfirmed = operationBuilder23, RegisterType = operationBuilder24, SecurityStamp = operationBuilder25, TwoFactorEnabled = operationBuilder26, UserName = table.Column<string>(null, nullable29, new int?(250), false, null, true, null, null, null, nullable, null) };
			}, null, (table) => table.PrimaryKey("PK_AspNetUsers", (x) => x.Id), null);
			migrationBuilder.CreateTable("Clients", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<string>(null, nullable1, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable2 = nullable;
				int? nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<bool>(null, nullable2, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable4 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder2 = table.Column<string>(null, nullable4, new int?(100), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable5 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder3 = table.Column<int>(null, nullable5, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable6 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder4 = table.Column<string>(null, nullable6, new int?(100), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable7 = nullable;
				nullable3 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder5 = table.Column<int>(null, nullable7, nullable3, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable8 = nullable;
				nullable = null;
				return new { Id = operationBuilder, Active = operationBuilder1, AllowedOrigin = operationBuilder2, ApplicationType = operationBuilder3, Name = operationBuilder4, RefreshTokenLifeTime = operationBuilder5, Secret = table.Column<string>(null, nullable8, new int?(50), false, null, false, null, null, null, nullable, null) };
			}, null, (table) => table.PrimaryKey("PK_Clients", (x) => x.Id), null);
			migrationBuilder.CreateTable("RefreshTokens", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<string>(null, nullable1, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable2 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<string>(null, nullable2, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable3 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder2 = table.Column<string>(null, nullable3, new int?(250), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable4 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder3 = table.Column<string>(null, nullable4, new int?(250), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable5 = nullable;
				int? nullable6 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder4 = table.Column<DateTime>(null, nullable5, nullable6, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable7 = nullable;
				nullable6 = null;
				nullable = null;
				return new { Id = operationBuilder, ClientId = operationBuilder1, Email = operationBuilder2, Username = operationBuilder3, ExpiresUtc = operationBuilder4, IssuedUtc = table.Column<DateTime>(null, nullable7, nullable6, false, null, false, null, null, null, nullable, null) };
			}, null, (table) => table.PrimaryKey("PK_RefreshTokens", (x) => x.Id), null);
			migrationBuilder.CreateTable("AspNetRoleClaims", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				int? nullable2 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<int>(null, nullable1, nullable2, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable3 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<string>(null, nullable3, new int?(0x190), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable4 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder2 = table.Column<string>(null, nullable4, new int?(0x190), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable5 = nullable;
				nullable = null;
				return new { Id = operationBuilder, ClaimType = operationBuilder1, ClaimValue = operationBuilder2, RoleId = table.Column<string>(null, nullable5, new int?(50), false, null, false, null, null, null, nullable, null) };
			}, null, (table) => {
				table.PrimaryKey("PK_AspNetRoleClaims", (x) => x.Id);
				table.ForeignKey("FK_AspNetRoleClaims_AspNetRoles_RoleId", (x) => x.RoleId, "AspNetRoles", "Id", null, 0, 2);
			}, null);
			migrationBuilder.CreateTable("AspNetUserClaims", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				int? nullable2 = null;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<int>(null, nullable1, nullable2, false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable3 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<string>(null, nullable3, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable4 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder2 = table.Column<string>(null, nullable4, new int?(0x190), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable5 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder3 = table.Column<string>(null, nullable5, new int?(0x190), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable6 = nullable;
				nullable = null;
				return new { Id = operationBuilder, ApplicationUserId = operationBuilder1, ClaimType = operationBuilder2, ClaimValue = operationBuilder3, UserId = table.Column<string>(null, nullable6, new int?(50), false, null, false, null, null, null, nullable, null) };
			}, null, (table) => {
				table.PrimaryKey("PK_AspNetUserClaims", (x) => x.Id);
				table.ForeignKey("FK_AspNetUserClaims_AspNetUsers_ApplicationUserId", (x) => x.ApplicationUserId, "AspNetUsers", "Id", null, 0, 1);
				table.ForeignKey("FK_AspNetUserClaims_AspNetUsers_UserId", (x) => x.UserId, "AspNetUsers", "Id", null, 0, 2);
			}, null);
			migrationBuilder.CreateTable("AspNetUserLogins", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<string>(null, nullable1, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable2 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<string>(null, nullable2, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable3 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder2 = table.Column<string>(null, nullable3, new int?(50), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable4 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder3 = table.Column<string>(null, nullable4, new int?(0x190), false, null, true, null, null, null, nullable, null);
				nullable = null;
				bool? nullable5 = nullable;
				nullable = null;
				return new { LoginProvider = operationBuilder, ProviderKey = operationBuilder1, ApplicationUserId = operationBuilder2, ProviderDisplayName = operationBuilder3, UserId = table.Column<string>(null, nullable5, new int?(50), false, null, false, null, null, null, nullable, null) };
			}, null, (table) => {
				ParameterExpression parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				ConstructorInfo methodFromHandle = (ConstructorInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType46<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod(".ctor", new Type[] { typeof(u003cLoginProvideru003ej__TPar), typeof(u003cProviderKeyu003ej__TPar) }).MethodHandle, typeof(u003cu003ef__AnonymousType46<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle);
				Expression[] expressionArray = new Expression[] { Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_LoginProvider").MethodHandle, typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_ProviderKey").MethodHandle, typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)) };
				MemberInfo[] memberInfoArray = new MemberInfo[] { (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType46<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_LoginProvider").MethodHandle, typeof(u003cu003ef__AnonymousType46<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle), (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType46<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_ProviderKey").MethodHandle, typeof(u003cu003ef__AnonymousType46<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle) };
				table.PrimaryKey("PK_AspNetUserLogins_1", Expression.Lambda(Expression.New(methodFromHandle, (IEnumerable<Expression>)expressionArray, memberInfoArray), new ParameterExpression[] { parameterExpression }));
				parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				table.ForeignKey("FK_AspNetUserLogins_AspNetUsers_ApplicationUserId", Expression.Lambda(Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_ApplicationUserId").MethodHandle, typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), new ParameterExpression[] { parameterExpression }), "AspNetUsers", "Id", null, 0, 1);
				parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				table.ForeignKey("FK_AspNetUserLogins_AspNetUsers_UserId", Expression.Lambda(Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_UserId").MethodHandle, typeof(u003cu003ef__AnonymousType45<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), new ParameterExpression[] { parameterExpression }), "AspNetUsers", "Id", null, 0, 2);
			}, null);
			migrationBuilder.CreateTable("AspNetUserRoles", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<string>(null, nullable1, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable2 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<string>(null, nullable2, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable3 = nullable;
				nullable = null;
				return new { UserId = operationBuilder, RoleId = operationBuilder1, ApplicationUserId = table.Column<string>(null, nullable3, new int?(50), false, null, true, null, null, null, nullable, null) };
			}, null, (table) => {
				ParameterExpression parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				ConstructorInfo methodFromHandle = (ConstructorInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType48<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod(".ctor", new Type[] { typeof(u003cUserIdu003ej__TPar), typeof(u003cRoleIdu003ej__TPar) }).MethodHandle, typeof(u003cu003ef__AnonymousType48<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle);
				Expression[] expressionArray = new Expression[] { Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_UserId").MethodHandle, typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_RoleId").MethodHandle, typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)) };
				MemberInfo[] memberInfoArray = new MemberInfo[] { (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType48<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_UserId").MethodHandle, typeof(u003cu003ef__AnonymousType48<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle), (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType48<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_RoleId").MethodHandle, typeof(u003cu003ef__AnonymousType48<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle) };
				table.PrimaryKey("PK_AspNetUserRoles", Expression.Lambda(Expression.New(methodFromHandle, (IEnumerable<Expression>)expressionArray, memberInfoArray), new ParameterExpression[] { parameterExpression }));
				parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				table.ForeignKey("FK_AspNetUserRoles_AspNetUsers_ApplicationUserId", Expression.Lambda(Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_ApplicationUserId").MethodHandle, typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), new ParameterExpression[] { parameterExpression }), "AspNetUsers", "Id", null, 0, 1);
				parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				table.ForeignKey("FK_AspNetUserRoles_AspNetRoles_RoleId", Expression.Lambda(Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_RoleId").MethodHandle, typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), new ParameterExpression[] { parameterExpression }), "AspNetRoles", "Id", null, 0, 2);
				parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				table.ForeignKey("FK_AspNetUserRoles_AspNetUsers_UserId", Expression.Lambda(Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_UserId").MethodHandle, typeof(u003cu003ef__AnonymousType47<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), new ParameterExpression[] { parameterExpression }), "AspNetUsers", "Id", null, 0, 2);
			}, null);
			migrationBuilder.CreateTable("AspNetUserTokens", (ColumnsBuilder table) => {
				bool? nullable = null;
				bool? nullable1 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder = table.Column<string>(null, nullable1, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable2 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder1 = table.Column<string>(null, nullable2, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable3 = nullable;
				nullable = null;
				OperationBuilder<AddColumnOperation> operationBuilder2 = table.Column<string>(null, nullable3, new int?(50), false, null, false, null, null, null, nullable, null);
				nullable = null;
				bool? nullable4 = nullable;
				nullable = null;
				return new { UserId = operationBuilder, LoginProvider = operationBuilder1, Name = operationBuilder2, Value = table.Column<string>(null, nullable4, new int?(0x190), false, null, true, null, null, null, nullable, null) };
			}, null, (table) => {
				ParameterExpression parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				ConstructorInfo methodFromHandle = (ConstructorInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType50<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod(".ctor", new Type[] { typeof(u003cUserIdu003ej__TPar), typeof(u003cLoginProvideru003ej__TPar), typeof(u003cNameu003ej__TPar) }).MethodHandle, typeof(u003cu003ef__AnonymousType50<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle);
				Expression[] expressionArray = new Expression[] { Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_UserId").MethodHandle, typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_LoginProvider").MethodHandle, typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_Name").MethodHandle, typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)) };
				MemberInfo[] memberInfoArray = new MemberInfo[] { (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType50<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_UserId").MethodHandle, typeof(u003cu003ef__AnonymousType50<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle), (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType50<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_LoginProvider").MethodHandle, typeof(u003cu003ef__AnonymousType50<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle), (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType50<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_Name").MethodHandle, typeof(u003cu003ef__AnonymousType50<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle) };
				table.PrimaryKey("PK_AspNetUserTokens", Expression.Lambda(Expression.New(methodFromHandle, (IEnumerable<Expression>)expressionArray, memberInfoArray), new ParameterExpression[] { parameterExpression }));
				parameterExpression = Expression.Parameter(typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>), "x");
				table.ForeignKey("FK_AspNetUserTokens_AspNetUsers_UserId", Expression.Lambda(Expression.Property(parameterExpression, (MethodInfo)MethodBase.GetMethodFromHandle(typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).GetMethod("get_UserId").MethodHandle, typeof(u003cu003ef__AnonymousType49<OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>, OperationBuilder<AddColumnOperation>>).TypeHandle)), new ParameterExpression[] { parameterExpression }), "AspNetUsers", "Id", null, 0, 2);
			}, null);
			migrationBuilder.CreateIndex("IX_AspNetRoleClaims_RoleId", "AspNetRoleClaims", "RoleId", null, false, null);
			migrationBuilder.CreateIndex("RoleNameIndex", "AspNetRoles", "NormalizedName", null, true, "([NormalizedName] IS NOT NULL)");
			migrationBuilder.CreateIndex("IX_AspNetUserClaims_ApplicationUserId", "AspNetUserClaims", "ApplicationUserId", null, false, null);
			migrationBuilder.CreateIndex("IX_AspNetUserClaims_UserId", "AspNetUserClaims", "UserId", null, false, null);
			migrationBuilder.CreateIndex("IX_AspNetUserLogins_ApplicationUserId", "AspNetUserLogins", "ApplicationUserId", null, false, null);
			migrationBuilder.CreateIndex("IX_AspNetUserLogins_UserId", "AspNetUserLogins", "UserId", null, false, null);
			migrationBuilder.CreateIndex("IX_AspNetUserRoles_ApplicationUserId", "AspNetUserRoles", "ApplicationUserId", null, false, null);
			migrationBuilder.CreateIndex("IX_AspNetUserRoles_RoleId", "AspNetUserRoles", "RoleId", null, false, null);
			migrationBuilder.CreateIndex("EmailIndex", "AspNetUsers", "NormalizedEmail", null, false, null);
			migrationBuilder.CreateIndex("UserNameIndex", "AspNetUsers", "NormalizedUserName", null, true, "([NormalizedUserName] IS NOT NULL)");
		}
	}
}